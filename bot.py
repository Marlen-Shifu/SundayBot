import asyncio
import datetime
import json

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor
from aiogram.utils.markdown import hlink

from aiogram import types

import phonenumbers

import logging

from aiogram.dispatcher import FSMContext

from config import TOKEN

from operations import *

from states import *

import pandas as pd

import requests

import threading


logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}


main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"))
main_menu.add(types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫"))
main_menu.add(types.KeyboardButton("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))


@dp.message_handler(commands=['start'], state='*')
async def start(mes: types.Message, state: FSMContext):

    try:
        await state.finish()
    except:
        pass

    add_user(mes.from_user.id, mes.from_user.username)

    await mes.answer("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç Sunday Coffee.

–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ iPhone 14 –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫\"""", reply_markup=main_menu)


@dp.message_handler(lambda mes: mes.text == '–û—Ç–º–µ–Ω–∞', state='*')
async def start(mes: types.Message, state: FSMContext):

    try:
        await state.finish()
    except:
        pass

    await mes.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)


@dp.message_handler(lambda m: m.text == "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def tech_support(mes: types.Message):

    await mes.answer("–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –∫–æ–Ω–∫—É—Ä—Å–∞, –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤–µ—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—É—Ä—Å–æ–º, —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7 771 742 15 00")
    await mes.answer("–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É, –∏–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç–æ —Å–æ–æ–±—â–∏—Ç–µ @Marlen45 –∏–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É +7 700 686 20 81")


@dp.message_handler(lambda m: m.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
async def tech_support(mes: types.Message):

    await mes.answer("""–†–û–ó–´–ì–†–´–® iPHONE 14
–û–¢ SUNDAY COFFEEüòç

–ú—ã –∫–æ–º–∞–Ω–¥–∞ Sunday Coffee —Ö–æ—Ç–∏–º –æ–¥–∞—Ä–∏—Ç—å –ª—é–±–∏–º—ã—Ö –≥–æ—Å—Ç–µ–π —Ü–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ —Ä–µ—à–∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å ü•≥

üéÅ –î–≤–∞ –Ω–æ–≤–µ–Ω—å–∫–∏—Ö iPhone 14
üéÅ 3 AirPods 
üéÅ 300 –ø–æ—Ä—Ü–∏–π –∫–æ—Ñ–µ*

–£—Å–ª–æ–≤–∏—è:
‚ö°Ô∏è –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç. –í–∞—Å –∂–¥—ë—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤!

üí∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É –≤ –ª—é–±–æ–π –∫–æ—Ñ–µ–π–Ω–µ —Å–µ—Ç–∏ Sunday Coffee –Ω–∞ —Å—É–º–º—É 2000 —Ç–µ–Ω–≥–µ. –ù–∞ —ç—Ç—É —Å—É–º–º—É —É –Ω–∞—Å –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∫—Ä—É–∞—Å—Å–∞–Ω –∏ –±–æ–ª—å—à—É—é –ø–æ—Ä—Ü–∏—é –∫–æ—Ñ–µ.

üíå —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫ –≤ Telegram —á–∞—Ç-–±–æ—Ç–µ

üìå –æ–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞. –û–Ω–∏ –±—É–¥—É—Ç –ø–æ–¥–≤–µ–¥–µ–Ω—ã 30 –¥–µ–∫–∞–±—Ä—è –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ. 

–ß–µ–º –±–æ–ª—å—à–µ —á–µ–∫–æ–≤ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã –≤—ã–∏–≥—Ä–∞—Ç—å —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã‚ù§Ô∏è 

–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ü–∏–∏ - —Å 1 –ø–æ 30 –¥–µ–∫–∞–±—Ä—è 2022 –≥–æ–¥–∞. 

*300 –ø–æ—Ä—Ü–∏–π –∫–æ—Ñ–µ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É –¥–µ—Å—è—Ç—å—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 30 –ø–æ—Ä—Ü–∏–π –±–æ–¥—Ä—è—â–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∑–∞–ø–∞—Å –º–æ–∂–Ω–æ –¥–æ 31 –º–∞—Ä—Ç–∞ 2023 –≥–æ–¥–∞.""")


@dp.message_handler(lambda m: m.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫")
async def submit_name(mes: types.Message):

    await AddRecord.name.set()

    k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    k.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await mes.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è ", reply_markup=k)


@dp.message_handler(state=AddRecord.name)
async def submit_phone(mes: types.Message, state: FSMContext):

    await state.update_data(name=mes.text)

    await AddRecord.phone.set()

    k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    k.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    k.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await mes.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\"", reply_markup=k)


@dp.message_handler(state=AddRecord.phone, content_types=['text', 'contact'])
async def submit_cheque_number(mes: types.Message, state: FSMContext):
    if mes.contact is not None:
        try:
            num = phonenumbers.parse(mes.contact.phone_number, "KZ")
        except:
            await mes.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç')
            return


        if (phonenumbers.is_valid_number(num)):

            await state.update_data(phone = mes.contact.phone_number)
        else:
            await mes.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç')
            return

    else:
        try:
            num = phonenumbers.parse(mes.text, "KZ")
        except:
            await mes.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç')
            return

        if (phonenumbers.is_valid_number(num)):

            await state.update_data(phone=mes.text)

        else:
            await mes.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç')
            return

    await AddRecord.cheque_number.set()

    k = types.ReplyKeyboardMarkup(resize_keyboard=True)
    k.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await mes.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞", reply_markup=k)

    with open("check_example_number.png", 'rb') as file:

        await mes.answer_photo(file, "–ü—Ä–∏–º–µ—Ä")

    await mes.answer("–ù–æ–º–µ—Ä —á–µ–∫–∞ –≤—ã–¥–µ–ª–µ–Ω –∫—Ä–∞—Å–Ω—ã–º.")



@dp.message_handler(state=AddRecord.cheque_number, content_types=types.ContentTypes.all())
async def submit_cheque_photo(mes: types.Message, state: FSMContext):

    if mes.content_type == 'text':

        await state.update_data(cheque_number=mes.text)

        await AddRecord.cheque_photo.set()

        await mes.answer("""–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.""")

        await mes.answer("–í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ç–∫–æ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ.")

        with open("check_example.jpg", 'rb') as file:

            await mes.answer_photo(file, "–ü—Ä–∏–º–µ—Ä")

    else:
        await mes.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —á–µ–∫–∞.")


@dp.message_handler(state=AddRecord.cheque_photo, content_types=types.ContentTypes.all())
async def submit_confirm(mes: types.Message, state: FSMContext):

    if len(mes.photo) != 0:

        print(mes.photo[-1].file_id)
        await state.update_data(cheque_photo = mes.photo[-1].file_id)

    elif mes.document is not None:

        await state.update_data(cheque_photo=mes.document.file_id)

    else:
        await mes.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª")
        return

    await AddRecord.confirm.set()


    data = await state.get_data()

    k = types.ReplyKeyboardMarkup(resize_keyboard=True)

    k.add(types.KeyboardButton("–î–∞"))
    k.add(types.KeyboardButton("–ù–µ—Ç"))

    await mes.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n   –ò–º—è: {data.get('name')}\n   –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get('phone')}\n   –ù–æ–º–µ—Ä —á–µ–∫–∞: {data.get('cheque_number')}", reply_markup=k)


@dp.message_handler(state=AddRecord.confirm)
async def success_submit(mes: types.Message, state: FSMContext):
    answer = mes.text

    if answer == '–î–∞':

        data = await state.get_data()

        add_record(**data)


        link = hlink('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', 'https://instagram.com/sundaycoffee.kz')

        k = types.InlineKeyboardMarkup()
        k.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ Instagram Sunday Coffee", url='https://instagram.com/sundaycoffee.kz'))

        await mes.answer(f"""–í–∞—à —á–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòç

–†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è:
üóìÔ∏è 30 –¥–µ–∫–∞–±—Ä—è
üïñ 19.00 
–≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ –Ω–∞ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ {link}.

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –±–æ–ª—å—à–µ —á–µ–∫–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å iPhone 14.

–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏!""", reply_markup=k, parse_mode="HTML")

        await mes.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif answer == '–ù–µ—Ç':

        await mes.answer('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫\"', reply_markup=main_menu)

    else:

        await mes.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç")
        return

    await state.finish()


@dp.message_handler(commands=['report'])
async def report(mes: types.Message):
    records = get_all_records()

    msg = "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏: "

    for record in records:
        msg += f"\n     –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {record.id}"
        msg += f"\n             –ò–º—è: {record.name}"
        msg += f"\n             –¢–µ–ª–µ—Ñ–æ–Ω: {record.phone}"
        msg += f"\n             –ù–æ–º–µ—Ä —á–µ–∫–∞: {record.cheque_number}"
        msg += f"\n             –§–æ—Ç–æ —á–µ–∫–∞: /photo_{record.id}"
        msg += f"\n"
        msg += f"\n             –£–¥–∞–ª–∏—Ç—å —á–µ–∫: /delete_{record.id}"

        if len(msg) > 3900:
            await mes.answer(msg)
            msg = ""

    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {len(records)}"

    await mes.answer(msg)


@dp.message_handler(lambda mes: mes.text.startswith('/photo'))
async def cheque_photo(mes: types.Message):

    record_id = mes.text.split('_')[1]
    record = get_record(record_id)

    try:
        await mes.answer_photo(record.cheque_photo)
    except Exception as e:
        await mes.answer_document(record.cheque_photo)


@dp.message_handler(lambda mes: mes.text.startswith('/delete'))
async def delete_cheque(mes: types.Message):

    record_id = mes.text.split('_')[1]

    await DeleteRecordState.confirm.set()

    k = types.InlineKeyboardMarkup()
    k.add(types.InlineKeyboardButton('–î–∞', callback_data=f'delete_{record_id}'), types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no'))

    msg = "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫?"

    record = get_record(record_id)

    msg += f"\n     –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {record.id}"
    msg += f"\n         –ò–º—è: {record.name}"
    msg += f"\n         –¢–µ–ª–µ—Ñ–æ–Ω: {record.phone}"
    msg += f"\n         –ù–æ–º–µ—Ä —á–µ–∫–∞: {record.cheque_number}"
    msg += f"\n         –§–æ—Ç–æ —á–µ–∫–∞: /photo_{record.id}"

    await mes.answer(msg, reply_markup=k)


@dp.callback_query_handlers(state=DeleteRecordState.confirm)
async def delete_cheque_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data.startswith('delete'):

        await state.finish()

        data = call.data.split('_')

        res = delete_record(data[1])

        await call.answer('1')

        if res == 'yes':
            await call.bot.send_message(call.from_user.id, "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=main_menu)

        else:
            await call.bot.send_message(call.from_user.id, "–£–≤—ã –æ—à–∏–±–∫–∞((( \n–°–æ–æ–±—â–∏—Ç–µ @Marlen45", reply_markup=main_menu)


    elif call.data == 'no':

        await state.finish()
        await call.bot.send_message(call.from_user.id, "–û—Ç–º–µ–Ω–∞", reply_markup=main_menu)


    else:
        await call.bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ \"–î–∞ \" –∏–ª–∏ \"–ù–µ—Ç\"")



@dp.message_handler(commands=['report_excel'])
async def report(mes: types.Message):
    records = get_all_records()
    today = datetime.datetime.today() + datetime.timedelta(hours=6)
    today = today.date()

    t = threading.Thread(target=write_report, args=(today, records, bot, mes))

    t.start()

    t.join()

    with open(f'{today}_report.xlsx', 'rb') as file:
        await mes.answer_document(file)



def write_report(date, records, bot, mes):
    writer = pd.ExcelWriter(f'{date}_report.xlsx', engine='xlsxwriter')

    names = []
    phones = []
    cheque_numbers = []
    cheque_photos_urls = []

    for record in records:
        names.append(record.name)
        phones.append(record.phone)
        cheque_numbers.append(record.cheque_number)

        get_url = f'https://api.telegram.org/bot{TOKEN}/getFile?file_id={record.cheque_photo}'

        data = json.loads(requests.get(get_url, headers=headers).content)

        file_path = data['result']['file_path']

        photo_url = f'https://api.telegram.org/file/bot{TOKEN}/{file_path}'

        cheque_photos_urls.append(photo_url)

    df = pd.DataFrame({'–ò–º—è': names, '–¢–µ–ª–µ—Ñ–æ–Ω': phones, '–ù–æ–º–µ—Ä —á–µ–∫–∞': cheque_numbers, 'URL —Ñ–æ—Ç–æ': cheque_photos_urls})

    df.to_excel(writer, sheet_name='–ó–∞—è–≤–∫–∏', index=False)

    writer.save()

    # with open(f'{date}_report.xlsx', 'rb') as file:
    #     loop = asyncio.new_event_loop()
    #
    #     loop.run_until_complete(bot.send_document(mes.from_user.id, file))

        # await mes.answer_document(file)

if __name__ == "__main__":
    executor.start_polling(dp)